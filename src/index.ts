/**
** To-Do Plus
** index.ts
** @author Miroslav Safar (xsafar23)
*/
// File was generated with electron-forge and edited by Miroslav Safar 

import { app, BrowserWindow, ipcMain, IpcMainEvent, Menu, MenuItem, shell } from 'electron';
import path from "path";
import { openDeleteConfirmation, openTaskListDeleteConfirmation, openTaskListSettings, openTaskSettings } from './menus';
// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) { // eslint-disable-line global-require
  app.quit();
}

app.setName("To-Do Plus");

const isMac = process.platform === 'darwin'

// Application menu for macOS
const menu: Menu = new Menu();
let menuIndex = 0;
if (isMac) {
  menu.insert(menuIndex++, new MenuItem(
    {
      label: app.name,
      submenu: [
        { role: 'about' },
        { type: 'separator' },
        { role: 'services' },
        { type: 'separator' },
        { role: 'hide' },
        { role: 'hideOthers' },
        { role: 'unhide' },
        { type: 'separator' },
        { role: 'quit' }
      ]
    }
  ));

  menu.insert(menuIndex++, new MenuItem(
    {
      label: 'File',
      submenu: [
        isMac ? { role: 'close' } : { role: 'quit' }
      ]
    }
  ));

  menu.insert(menuIndex++, new MenuItem(
    {
      label: 'Edit',
      submenu: [
        { role: 'undo' },
        { role: 'redo' },
        { type: 'separator' },
        { role: 'cut' },
        { role: 'copy' },
        { role: 'paste' },
        { role: 'pasteAndMatchStyle' },
        { role: 'delete' },
        { role: 'selectAll' },
        { type: 'separator' },
        {
          label: 'Speech',
          submenu: [
            { role: 'startSpeaking' },
            { role: 'stopSpeaking' }
          ]
        }
      ]
    }
  ));
}
Menu.setApplicationMenu(menu);

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 900,
    width: 1600,
    title: "To-Do Plus",
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY
    }
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  //mainWindow.webContents.openDevTools({ mode: "detach" });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// ---  IPC Messages handling ----
// @author Miroslav Safar (xsafar23)

// Handle open-dropdown messages and open proper dropdowns
ipcMain.on("open-dropdown", (event, ...args) => {
  if (args[0] === "tasklist-props") {
    openTaskListSettings(event, args[1])
  } else if (args[0] === "task-props") {
    openTaskSettings(event, args[1]);
  }
});

// Open delete confirmation dialog for task deletion
ipcMain.on("delete-task-confirm", (event, ...args) => {
  openDeleteConfirmation(event, args[0]);
})

// Open delete confirmation dialog for tasklist deletion
ipcMain.on("delete-tasklist-confirm", (event, ...args) => {
  openTaskListDeleteConfirmation(event, args[0]);
})

// Handle get-auth-token message
// Returns authentication token saved in the system native password store
ipcMain.handle("get-auth-token", async (event, ...args) => {
  const keytar = require("keytar");
  return await keytar.getPassword("To-Do Plus", "token");
})

// Handle set-auth-token message
// Set authentication token in the system native password store
ipcMain.on("set-auth-token", (event, ...args) => {
  const keytar = require("keytar");
  keytar.setPassword("To-Do Plus", "token", args[0]);
})

// Handle delete-auth-token message
// Deleted authentication token from the system native password store
ipcMain.handle("delete-auth-token", async (event, ...args) => {
  const keytar = require("keytar");
  await keytar.deletePassword("To-Do Plus", "token");
  return;
})
